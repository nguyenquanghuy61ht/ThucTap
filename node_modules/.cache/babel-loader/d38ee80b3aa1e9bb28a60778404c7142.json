{"ast":null,"code":"import Keycloak from \"keycloak-js\";\nimport ConstantsList from '../appConfig';\nimport JwtAuthService from './jwtAuthService';\n\nvar _kc = new Keycloak(ConstantsList.ROOT_PATH + 'keycloak.json');\n/**\n * Initializes Keycloak instance and calls the provided callback function if successfully authenticated.\n *\n * @param onAuthenticatedCallback\n */\n\n\nvar initKeycloak = function initKeycloak(onAuthenticatedCallback) {\n  _kc.init({\n    onLoad: 'check-sso',\n    promiseType: 'native',\n    silentCheckSsoRedirectUri: window.location.origin + '/' + ConstantsList.ROOT_PATH + '/silent-check-sso.html',\n    pkceMethod: 'S256'\n  }).then(function (authenticated) {\n    if (authenticated) {\n      JwtAuthService.setLoginToken(_kc.token); //Xem lại hàm này để làm chuẩn xác hơn\n\n      onAuthenticatedCallback();\n    } else {\n      console.warn(\"not authenticated!\");\n      doLogin();\n    }\n  });\n};\n\nvar doLogin = _kc.login;\nvar doLogout = _kc.logout;\n\nvar getToken = function getToken() {\n  return _kc.token;\n};\n\nvar updateToken = function updateToken(successCallback) {\n  return _kc.updateToken(5).then(successCallback).catch(doLogin);\n};\n\nvar getUsername = function getUsername() {\n  return _kc.tokenParsed.preferred_username;\n};\n\nexport default {\n  initKeycloak: initKeycloak,\n  doLogin: doLogin,\n  doLogout: doLogout,\n  getToken: getToken,\n  updateToken: updateToken,\n  getUsername: getUsername\n};","map":{"version":3,"names":["Keycloak","ConstantsList","JwtAuthService","_kc","ROOT_PATH","initKeycloak","onAuthenticatedCallback","init","onLoad","promiseType","silentCheckSsoRedirectUri","window","location","origin","pkceMethod","then","authenticated","setLoginToken","token","console","warn","doLogin","login","doLogout","logout","getToken","updateToken","successCallback","catch","getUsername","tokenParsed","preferred_username"],"sources":["D:/Thuctap/client-app-v3/src/app/services/UserService.js"],"sourcesContent":["import Keycloak from \"keycloak-js\";\nimport ConstantsList from '../appConfig';\nimport JwtAuthService from './jwtAuthService';\nconst _kc = new Keycloak(ConstantsList.ROOT_PATH+'keycloak.json');\n\n/**\n * Initializes Keycloak instance and calls the provided callback function if successfully authenticated.\n *\n * @param onAuthenticatedCallback\n */\nconst initKeycloak = (onAuthenticatedCallback) => {\n  _kc.init({\n    onLoad: 'check-sso',\n    promiseType: 'native',\n    silentCheckSsoRedirectUri: window.location.origin +'/'+ConstantsList.ROOT_PATH+ '/silent-check-sso.html',\n    pkceMethod: 'S256',\n  })\n    .then((authenticated) => {\n      if (authenticated) {\n        JwtAuthService.setLoginToken(_kc.token);//Xem lại hàm này để làm chuẩn xác hơn\n        onAuthenticatedCallback();\n      } else {\n        console.warn(\"not authenticated!\");\n        doLogin();\n      }\n    })\n};\n\nconst doLogin = _kc.login;\n\nconst doLogout = _kc.logout;\n\nconst getToken = () => _kc.token;\n\nconst updateToken = (successCallback) => {\n  return _kc.updateToken(5)\n    .then(successCallback)\n    .catch(doLogin)\n};\n\nconst getUsername = () => _kc.tokenParsed.preferred_username;\n\nexport default {\n  initKeycloak,\n  doLogin,\n  doLogout,\n  getToken,\n  updateToken,\n  getUsername,\n}\n"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,aAArB;AACA,OAAOC,aAAP,MAA0B,cAA1B;AACA,OAAOC,cAAP,MAA2B,kBAA3B;;AACA,IAAMC,GAAG,GAAG,IAAIH,QAAJ,CAAaC,aAAa,CAACG,SAAd,GAAwB,eAArC,CAAZ;AAEA;AACA;AACA;AACA;AACA;;;AACA,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,uBAAD,EAA6B;EAChDH,GAAG,CAACI,IAAJ,CAAS;IACPC,MAAM,EAAE,WADD;IAEPC,WAAW,EAAE,QAFN;IAGPC,yBAAyB,EAAEC,MAAM,CAACC,QAAP,CAAgBC,MAAhB,GAAwB,GAAxB,GAA4BZ,aAAa,CAACG,SAA1C,GAAqD,wBAHzE;IAIPU,UAAU,EAAE;EAJL,CAAT,EAMGC,IANH,CAMQ,UAACC,aAAD,EAAmB;IACvB,IAAIA,aAAJ,EAAmB;MACjBd,cAAc,CAACe,aAAf,CAA6Bd,GAAG,CAACe,KAAjC,EADiB,CACuB;;MACxCZ,uBAAuB;IACxB,CAHD,MAGO;MACLa,OAAO,CAACC,IAAR,CAAa,oBAAb;MACAC,OAAO;IACR;EACF,CAdH;AAeD,CAhBD;;AAkBA,IAAMA,OAAO,GAAGlB,GAAG,CAACmB,KAApB;AAEA,IAAMC,QAAQ,GAAGpB,GAAG,CAACqB,MAArB;;AAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAW;EAAA,OAAMtB,GAAG,CAACe,KAAV;AAAA,CAAjB;;AAEA,IAAMQ,WAAW,GAAG,SAAdA,WAAc,CAACC,eAAD,EAAqB;EACvC,OAAOxB,GAAG,CAACuB,WAAJ,CAAgB,CAAhB,EACJX,IADI,CACCY,eADD,EAEJC,KAFI,CAEEP,OAFF,CAAP;AAGD,CAJD;;AAMA,IAAMQ,WAAW,GAAG,SAAdA,WAAc;EAAA,OAAM1B,GAAG,CAAC2B,WAAJ,CAAgBC,kBAAtB;AAAA,CAApB;;AAEA,eAAe;EACb1B,YAAY,EAAZA,YADa;EAEbgB,OAAO,EAAPA,OAFa;EAGbE,QAAQ,EAARA,QAHa;EAIbE,QAAQ,EAARA,QAJa;EAKbC,WAAW,EAAXA,WALa;EAMbG,WAAW,EAAXA;AANa,CAAf"},"metadata":{},"sourceType":"module"}