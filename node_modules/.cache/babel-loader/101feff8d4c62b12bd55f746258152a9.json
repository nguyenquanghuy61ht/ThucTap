{"ast":null,"code":"import _classCallCheck from \"D:\\\\Thuctap\\\\client-app-v3\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\Thuctap\\\\client-app-v3\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"D:\\\\Thuctap\\\\client-app-v3\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"D:\\\\Thuctap\\\\client-app-v3\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"D:\\\\Thuctap\\\\client-app-v3\\\\src\\\\app\\\\EgretLayout\\\\EgretLayout.jsx\";\nimport React, { Component } from \"react\";\nimport { EgretLayouts } from \"./index\";\nimport { PropTypes } from \"prop-types\";\nimport { withRouter } from \"react-router-dom\";\nimport { matchRoutes } from \"react-router-config\";\nimport { connect } from \"react-redux\";\nimport AppContext from \"app/appContext\";\nimport { setLayoutSettings, setDefaultSettings } from \"app/redux/actions/LayoutActions\";\nimport { isEqual, merge } from \"lodash\";\nimport { isMdScreen, getQueryParam } from \"utils\";\nimport localStorageService from \"app/services/localStorageService\";\nimport history from \"history.js\";\nimport ConstantList from \"../appConfig\";\n\nvar EgretLayout = /*#__PURE__*/function (_Component) {\n  _inherits(EgretLayout, _Component);\n\n  var _super = _createSuper(EgretLayout);\n\n  function EgretLayout(props, context) {\n    var _this;\n\n    _classCallCheck(this, EgretLayout);\n\n    _this = _super.call(this, props);\n\n    _this.setLayoutFromQuery = function () {\n      try {\n        var settingsFromQuery = getQueryParam(\"settings\");\n        settingsFromQuery = settingsFromQuery ? JSON.parse(settingsFromQuery) : {};\n        var _this$props = _this.props,\n            settings = _this$props.settings,\n            _setLayoutSettings = _this$props.setLayoutSettings,\n            _setDefaultSettings = _this$props.setDefaultSettings;\n        var updatedSettings = merge({}, settings, settingsFromQuery);\n\n        _setLayoutSettings(updatedSettings);\n\n        _setDefaultSettings(updatedSettings);\n      } catch (e) {// console.log(\"Error! Set settings from query param\", e);\n      }\n    };\n\n    _this.listenWindowResize = function () {\n      var _this$props2 = _this.props,\n          settings = _this$props2.settings,\n          setLayoutSettings = _this$props2.setLayoutSettings;\n\n      if (settings.layout1Settings.leftSidebar.show) {\n        var mode = isMdScreen() ? \"close\" : \"full\";\n        setLayoutSettings(merge({}, settings, {\n          layout1Settings: {\n            leftSidebar: {\n              mode: mode\n            }\n          }\n        }));\n      }\n    };\n\n    _this.appContext = context;\n\n    _this.updateSettingsFromRouter(); // Set settings from query (Only for demo purpose)\n\n\n    _this.setLayoutFromQuery();\n\n    return _this;\n  }\n\n  _createClass(EgretLayout, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (this.props.location.pathname !== prevProps.location.pathname) {\n        this.updateSettingsFromRouter();\n      }\n    }\n  }, {\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      if (window) {\n        // LISTEN WINDOW RESIZE\n        window.addEventListener(\"resize\", this.listenWindowResize);\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (window) {\n        window.removeEventListener(\"resize\", this.listenWindowResize);\n      }\n    }\n  }, {\n    key: \"updateSettingsFromRouter\",\n    value: function updateSettingsFromRouter() {\n      var routes = this.appContext.routes;\n      var matched = matchRoutes(routes, this.props.location.pathname)[0];\n      var _this$props3 = this.props,\n          defaultSettings = _this$props3.defaultSettings,\n          settings = _this$props3.settings,\n          setLayoutSettings = _this$props3.setLayoutSettings;\n\n      if (matched && matched.route.settings) {\n        // ROUTE HAS SETTINGS\n        var updatedSettings = merge({}, settings, matched.route.settings);\n\n        if (!isEqual(settings, updatedSettings)) {\n          setLayoutSettings(updatedSettings); // console.log('Route has settings');\n        }\n      } else if (!isEqual(settings, defaultSettings)) {\n        setLayoutSettings(defaultSettings); // console.log('reset settings', defaultSettings);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var settings = this.props.settings;\n      var Layout = EgretLayouts[settings.activeLayout];\n      var tokenExpiredTime = localStorageService.getItem(\"tokenExpiredTime\");\n\n      if (tokenExpiredTime) {\n        var expiredTime = new Date(tokenExpiredTime);\n\n        if (expiredTime < Date.now()) {\n          localStorageService.removeItem(\"tokenExpiredTime\");\n          history.push(ConstantList.LOGIN_PAGE);\n        }\n      }\n\n      return /*#__PURE__*/React.createElement(Layout, Object.assign({}, this.props, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 12\n        }\n      }));\n    }\n  }]);\n\n  return EgretLayout;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    setLayoutSettings: PropTypes.func.isRequired,\n    setDefaultSettings: PropTypes.func.isRequired,\n    settings: state.layout.settings,\n    defaultSettings: state.layout.defaultSettings\n  };\n};\n\nEgretLayout.contextType = AppContext;\nexport default withRouter(connect(mapStateToProps, {\n  setLayoutSettings: setLayoutSettings,\n  setDefaultSettings: setDefaultSettings\n})(EgretLayout));","map":{"version":3,"names":["React","Component","EgretLayouts","PropTypes","withRouter","matchRoutes","connect","AppContext","setLayoutSettings","setDefaultSettings","isEqual","merge","isMdScreen","getQueryParam","localStorageService","history","ConstantList","EgretLayout","props","context","setLayoutFromQuery","settingsFromQuery","JSON","parse","settings","updatedSettings","e","listenWindowResize","layout1Settings","leftSidebar","show","mode","appContext","updateSettingsFromRouter","prevProps","location","pathname","window","addEventListener","removeEventListener","routes","matched","defaultSettings","route","Layout","activeLayout","tokenExpiredTime","getItem","expiredTime","Date","now","removeItem","push","LOGIN_PAGE","mapStateToProps","state","func","isRequired","layout","contextType"],"sources":["D:/Thuctap/client-app-v3/src/app/EgretLayout/EgretLayout.jsx"],"sourcesContent":["import React, { Component } from \"react\";\nimport { EgretLayouts } from \"./index\";\nimport { PropTypes } from \"prop-types\";\nimport { withRouter } from \"react-router-dom\";\nimport { matchRoutes } from \"react-router-config\";\nimport { connect } from \"react-redux\";\nimport AppContext from \"app/appContext\";\nimport {\n  setLayoutSettings,\n  setDefaultSettings\n} from \"app/redux/actions/LayoutActions\";\nimport { isEqual, merge } from \"lodash\";\nimport { isMdScreen, getQueryParam } from \"utils\";\nimport localStorageService from \"app/services/localStorageService\";\nimport history from \"history.js\";\nimport ConstantList from \"../appConfig\";\n\n\nclass EgretLayout extends Component {\n  constructor(props, context) {\n    super(props);\n    this.appContext = context;\n    this.updateSettingsFromRouter();\n\n    // Set settings from query (Only for demo purpose)\n    this.setLayoutFromQuery();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.location.pathname !== prevProps.location.pathname) {\n      this.updateSettingsFromRouter();\n    }\n  }\n\n  componentWillMount() {\n    if (window) {\n      // LISTEN WINDOW RESIZE\n      window.addEventListener(\"resize\", this.listenWindowResize);\n    }\n  }\n\n  componentWillUnmount() {\n    if (window) {\n      window.removeEventListener(\"resize\", this.listenWindowResize);\n    }\n  }\n\n  setLayoutFromQuery = () => {\n    try {\n      let settingsFromQuery = getQueryParam(\"settings\");\n      settingsFromQuery = settingsFromQuery\n        ? JSON.parse(settingsFromQuery)\n        : {};\n      let { settings, setLayoutSettings, setDefaultSettings } = this.props;\n      let updatedSettings = merge({}, settings, settingsFromQuery);\n\n      setLayoutSettings(updatedSettings);\n      setDefaultSettings(updatedSettings);\n    } catch (e) {\n      // console.log(\"Error! Set settings from query param\", e);\n    }\n  };\n\n  listenWindowResize = () => {\n    let { settings, setLayoutSettings } = this.props;\n\n    if (settings.layout1Settings.leftSidebar.show) {\n      let mode = isMdScreen() ? \"close\" : \"full\";\n      setLayoutSettings(\n        merge({}, settings, { layout1Settings: { leftSidebar: { mode } } })\n      );\n    }\n  };\n\n  updateSettingsFromRouter() {\n    const { routes } = this.appContext;\n    const matched = matchRoutes(routes, this.props.location.pathname)[0];\n    let { defaultSettings, settings, setLayoutSettings } = this.props;\n\n    if (matched && matched.route.settings) {\n      // ROUTE HAS SETTINGS\n      const updatedSettings = merge({}, settings, matched.route.settings);\n      if (!isEqual(settings, updatedSettings)) {\n        setLayoutSettings(updatedSettings);\n        // console.log('Route has settings');\n      }\n    } else if (!isEqual(settings, defaultSettings)) {\n      setLayoutSettings(defaultSettings);\n      // console.log('reset settings', defaultSettings);\n    }\n  }\n\n  render() {\n    const { settings } = this.props;\n    const Layout = EgretLayouts[settings.activeLayout];\n\n    let tokenExpiredTime = localStorageService.getItem(\"tokenExpiredTime\");\n    if (tokenExpiredTime) {\n      let expiredTime = new Date(tokenExpiredTime);\n      if (expiredTime < Date.now()) {\n        localStorageService.removeItem(\"tokenExpiredTime\");\n        history.push(ConstantList.LOGIN_PAGE);\n      }\n    }\n\n    return <Layout {...this.props} />;\n  }\n}\n\nconst mapStateToProps = state => ({\n  setLayoutSettings: PropTypes.func.isRequired,\n  setDefaultSettings: PropTypes.func.isRequired,\n  settings: state.layout.settings,\n  defaultSettings: state.layout.defaultSettings\n});\n\nEgretLayout.contextType = AppContext;\n\nexport default withRouter(\n  connect(\n    mapStateToProps,\n    { setLayoutSettings, setDefaultSettings }\n  )(EgretLayout)\n);\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}